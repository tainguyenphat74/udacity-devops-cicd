name: Frontend Continuous Deployment

on:
  workflow_dispatch:

  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'

env:
  IMAGE_NAME: frontend
  DEPLOYMENT_NAME: frontend
  EKS_CLUSTER_NAME: cluster

jobs:
  lint:
    name: Lint job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

  test:
    name: Test job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Setup nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run test
        run: CI=true npm run test

  build:
    name: Build and Push Docker image to Amazon ECR
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: success()
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, Tag, and Push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          aws eks update-kubeconfig --name cluster
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://a753fe30e44074c539e21026be0fdc7a-395757174.us-east-1.elb.amazonaws.com .
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
          restore-keys: |
            docker-${{ github.sha }}-

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Update kubeconfig
        run: |